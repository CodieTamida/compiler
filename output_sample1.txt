Token: Separator            Lexeme: $
<Rat24S> -> <Opt Function Definitions>
<Opt Function Definitions> -> <Function Definitions>
<Function Definitions> -> <Function> <Function Definitions Prime>
Token: Keyword              Lexeme: function
<Function> -> function <Identifier> ( <Opt Parameter List> ) <Opt Declaration List> <Body>
Token: Identifier           Lexeme: move
Token: Separator            Lexeme: (
<Opt Parameter List> -> <Parameter List>
Token: Identifier           Lexeme: x
<Parameter List> -> <Parameter> <Parameter Prime> 
<Parameter> -> <IDs> <Qualifier>
Token: Identifier           Lexeme: x
<IDs> -> <Identifier> <IDs Prime>
<IDs Prime> -> ε
<Qualifier> -> real
<Parameter Prime> -> , <Parameter List>
Token: Identifier           Lexeme: y
<Parameter List> -> <Parameter> <Parameter Prime> 
<Parameter> -> <IDs> <Qualifier>
Token: Identifier           Lexeme: y
<IDs> -> <Identifier> <IDs Prime>
<IDs Prime> -> ε
<Qualifier> -> real
<Parameter Prime> -> ε
Token: Separator            Lexeme: )
<Opt Declaration List> -> ε
Token: Separator            Lexeme: {
<Body> -> { <Statement List> }
<Statement List> -> <Statement> <Statement List Prime>
Token: Identifier           Lexeme: longitude
<Statement> -> <Assign>
<Assign> -> <Identifier> = <Expression> ;
Token: Operator             Lexeme: =
Token: Identifier           Lexeme: x
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> ->  <Identifier> 
<Term Prime> -> ε
<Expression Prime> -> ε
<Statement List Prime> -> <Statement>
Token: Identifier           Lexeme: latitude
<Statement> -> <Assign>
<Assign> -> <Identifier> = <Expression> ;
Token: Operator             Lexeme: =
Token: Identifier           Lexeme: y
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> ->  <Identifier> 
<Term Prime> -> ε
<Expression Prime> -> ε
Token: Separator            Lexeme: }
<Function Definitions Prime> -> <Function Definitions>
Token: Keyword              Lexeme: function
<Function> -> function <Identifier> ( <Opt Parameter List> ) <Opt Declaration List> <Body>
Token: Identifier           Lexeme: scale
Token: Separator            Lexeme: (
<Opt Parameter List> -> <Parameter List>
Token: Identifier           Lexeme: x
<Parameter List> -> <Parameter> <Parameter Prime> 
<Parameter> -> <IDs> <Qualifier>
Token: Identifier           Lexeme: x
<IDs> -> <Identifier> <IDs Prime>
<IDs Prime> -> ε
<Qualifier> -> integer
<Parameter Prime> -> , <Parameter List>
Token: Identifier           Lexeme: y
<Parameter List> -> <Parameter> <Parameter Prime> 
<Parameter> -> <IDs> <Qualifier>
Token: Identifier           Lexeme: y
<IDs> -> <Identifier> <IDs Prime>
<IDs Prime> -> ε
<Qualifier> -> integer
<Parameter Prime> -> ε
Token: Separator            Lexeme: )
<Opt Declaration List> -> ε
Token: Separator            Lexeme: {
<Body> -> { <Statement List> }
<Statement List> -> <Statement> <Statement List Prime>
Token: Identifier           Lexeme: width
<Statement> -> <Assign>
<Assign> -> <Identifier> = <Expression> ;
Token: Operator             Lexeme: =
Token: Identifier           Lexeme: width
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> ->  <Identifier> 
Token: Operator             Lexeme: *
<Term Prime> -> * <Factor> <Term Prime>
<Factor> ->  <Identifier> 
<Term Prime> -> ε
<Expression Prime> -> ε
<Statement List Prime> -> <Statement>
Token: Identifier           Lexeme: height
<Statement> -> <Assign>
<Assign> -> <Identifier> = <Expression> ;
Token: Operator             Lexeme: =
Token: Identifier           Lexeme: height
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> ->  <Identifier> 
Token: Operator             Lexeme: *
<Term Prime> -> * <Factor> <Term Prime>
<Factor> ->  <Identifier> 
<Term Prime> -> ε
<Expression Prime> -> ε
Token: Separator            Lexeme: }
Token: Separator            Lexeme: $
<Rat24S> -> <Opt Declaration List>
<Opt Declaration List> -> ε
Token: Separator            Lexeme: $
<Statement List> -> <Statement> <Statement List Prime>
Token: Identifier           Lexeme: num
<Statement> -> <Assign>
<Assign> -> <Identifier> = <Expression> ;
Token: Operator             Lexeme: =
Token: Integer              Lexeme: 1
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> ->  <INTEGER>
<Term Prime> -> ε
<Expression Prime> -> ε
Token: Separator            Lexeme: $
